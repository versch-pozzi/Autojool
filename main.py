#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import subprocess
import sys
import os
import re
import time
from datetime import datetime

def classify_vulnerability(vuln_text):
    """
    –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç—å - SQL Injection –∫–∞–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è, XSS –∏ Cross-Site —Å–∫—Ä—ã–≤–∞–µ–º
    """
    vuln_lower = vuln_text.lower()
    
    # –°–∫—Ä—ã–≤–∞–µ–º XSS –∏ Cross-Site Scripting
    if any(keyword in vuln_lower for keyword in ['xss', 'cross site scripting', 'cross-site scripting']):
        return 'HIDDEN', None
    
    # SQL Injection - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è
    elif 'sql injection' in vuln_lower:
        return 'CRITICAL', vuln_text
    
    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ
    else:
        return 'NORMAL', vuln_text

def run_joomscan(target_url):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç JoomScan –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    """
    try:
        command = f"joomscan -u {target_url}"
        result = subprocess.run(command, shell=True, capture_output=True, text=True, timeout=300)
        return result.stdout, result.stderr
        
    except subprocess.TimeoutExpired:
        return "", "Timeout"
    except Exception as e:
        return "", f"Error: {str(e)}"

def extract_clean_results(output):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–∏ (–∫—Ä–æ–º–µ XSS –∏ Cross-Site), SQL Injection –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ
    """
    results = {
        'version': '',
        'vulnerabilities': [],
        'exploits': []
    }
    
    lines = output.split('\n')
    current_vuln = ""
    
    for line in lines:
        line = line.strip()
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –∏ –ø—É—Ç—è—Ö
        if any(keyword in line for keyword in ['Admin page', 'path :', 'config file path', '-> http://']):
            continue
            
        # –í–µ—Ä—Å–∏—è Joomla
        if 'Joomla version' in line and not results['version']:
            results['version'] = line
        
        # –£—è–∑–≤–∏–º–æ—Å—Ç–∏ (–∫—Ä–æ–º–µ XSS –∏ Cross-Site)
        elif any(keyword in line for keyword in ['Joomla!', 'Remote', 'Admin', 'Password', 'SQL Injection', 'CVE-', 'LFI', 'RFI', 'vulnerability']):
            if line and not line.startswith('#') and len(line) > 10 and '[++]' not in line:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ XSS –∏ Cross-Site –≤ —Ç–µ–∫—Å—Ç–µ
                if any(xss_keyword in line.lower() for xss_keyword in ['xss', 'cross site', 'cross-site']):
                    continue
                
                severity, classified_vuln = classify_vulnerability(line)
                if severity != 'HIDDEN' and classified_vuln:
                    results['vulnerabilities'].append((severity, classified_vuln))
                    current_vuln = classified_vuln
        
        # CVE —É—è–∑–≤–∏–º–æ—Å—Ç–∏ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º XSS-related CVE)
        elif 'CVE-' in line:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ XSS CVE
            if any(xss_keyword in line.lower() for xss_keyword in ['xss', 'cross site', 'cross-site']):
                continue
                
            cve_match = re.search(r'CVE-\d{4}-\d+', line)
            if cve_match:
                severity, classified_vuln = classify_vulnerability(line)
                if severity != 'HIDDEN' and classified_vuln:
                    results['vulnerabilities'].append((severity, classified_vuln))
                    current_vuln = classified_vuln
        
        # –≠–∫—Å–ø–ª–æ–π—Ç—ã (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º XSS —ç–∫—Å–ø–ª–æ–π—Ç—ã)
        elif any(keyword in line.lower() for keyword in ['exploit', 'edb', 'poc']):
            if line and not line.startswith('#') and 'Admin page' not in line:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ XSS —ç–∫—Å–ø–ª–æ–π—Ç
                if any(xss_keyword in line.lower() for xss_keyword in ['xss', 'cross site', 'cross-site']):
                    continue
                    
                if current_vuln:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —ç–∫—Å–ø–ª–æ–π—Ç –∫ —Å–∫—Ä—ã—Ç–æ–π —É—è–∑–≤–∏–º–æ—Å—Ç–∏ (XSS)
                    severity, _ = classify_vulnerability(current_vuln)
                    if severity != 'HIDDEN':
                        exploit_info = f"{current_vuln} | {line}"
                        results['exploits'].append(exploit_info)
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π —É—è–∑–≤–∏–º–æ—Å—Ç–∏, –Ω–æ —ç–∫—Å–ø–ª–æ–π—Ç –Ω–µ XSS - –¥–æ–±–∞–≤–ª—è–µ–º
                    if not any(xss_keyword in line.lower() for xss_keyword in ['xss', 'cross site', 'cross-site']):
                        results['exploits'].append(line)
    
    return results

def save_table_results(target, results, output_file="scan_results.txt"):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ —É–¥–æ–±–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    """
    with open(output_file, 'a', encoding='utf-8') as f:
        f.write("‚ïî" + "‚ïê" * 78 + "‚ïó\n")
        f.write(f"‚ïë üîç –°–∞–π—Ç: {target:<65} ‚ïë\n")
        f.write(f"‚ïë üïí –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S'):<60} ‚ïë\n")
        f.write("‚ï†" + "‚ïê" * 78 + "‚ï£\n")
        
        if results['version']:
            f.write(f"‚ïë üìã {results['version']:<75} ‚ïë\n")
            f.write("‚ï†" + "‚ïê" * 78 + "‚ï£\n")
        
        # –¢–∞–±–ª–∏—Ü–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        if results['vulnerabilities']:
            f.write("‚ïë üö® –£–Ø–ó–í–ò–ú–û–°–¢–ò:{:<67} ‚ïë\n".format(""))
            f.write("‚ï†" + "‚îÄ" * 78 + "‚ï£\n")
            
            for severity, vuln in results['vulnerabilities']:
                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
                if len(vuln) > 75:
                    vuln = vuln[:72] + "..."
                
                # SQL Injection - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –æ–±—ã—á–Ω—ã–µ
                if severity == 'CRITICAL':
                    f.write(f"‚ïë üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø: {vuln:<64} ‚ïë\n")
                else:
                    f.write(f"‚ïë ‚ö™ –û–ë–´–ß–ù–ê–Ø: {vuln:<64} ‚ïë\n")
            
            f.write("‚ï†" + "‚ïê" * 78 + "‚ï£\n")
        else:
            f.write("‚ïë ‚úÖ –£—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ{:<56} ‚ïë\n".format(""))
            f.write("‚ï†" + "‚ïê" * 78 + "‚ï£\n")
        
        # –¢–∞–±–ª–∏—Ü–∞ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤
        if results['exploits']:
            f.write("‚ïë üí• –≠–ö–°–ü–õ–û–ô–¢–´:{:<67} ‚ïë\n".format(""))
            f.write("‚ï†" + "‚îÄ" * 78 + "‚ï£\n")
            
            for exploit in results['exploits']:
                if " | " in exploit:
                    vuln, link = exploit.split(" | ", 1)
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
                    severity, _ = classify_vulnerability(vuln)
                    vuln_type = "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø" if severity == 'CRITICAL' else "–û–ë–´–ß–ù–ê–Ø"
                    
                    f.write(f"‚ïë üìå {vuln_type}: {vuln[:60]:<60} ‚ïë\n")
                    f.write(f"‚ïë    üîó –°—Å—ã–ª–∫–∞:  {link[:60]:<60} ‚ïë\n")
                    f.write("‚ïë" + " " * 78 + "‚ïë\n")
                else:
                    if len(exploit) > 75:
                        exploit = exploit[:72] + "..."
                    f.write(f"‚ïë ‚Ä¢ {exploit:<74} ‚ïë\n")
            
            f.write("‚ïö" + "‚ïê" * 78 + "‚ïù\n\n")
        else:
            f.write("‚ïë ‚ùå –≠–∫—Å–ø–ª–æ–π—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ{:<56} ‚ïë\n".format(""))
            f.write("‚ïö" + "‚ïê" * 78 + "‚ïù\n\n")

def process_targets(file_path):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ü–µ–ª–∏ –∏–∑ —Ñ–∞–π–ª–∞
    """
    if not os.path.exists(file_path):
        print(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    with open(file_path, 'r', encoding='utf-8') as file:
        targets = [line.strip() for line in file if line.strip()]
    
    if not targets:
        print("–í —Ñ–∞–π–ª–µ –Ω–µ—Ç URL!")
        return
    
    print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(targets)} —Å–∞–π—Ç–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n")
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results_file = "scan_results.txt"
    if os.path.exists(results_file):
        os.remove(results_file)
    
    for i, target in enumerate(targets, 1):
        print(f"üì° –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {i}/{len(targets)}: {target}")
        
        stdout, stderr = run_joomscan(target)
        
        if stderr:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {stderr}")
            continue
        
        results = extract_clean_results(stdout)
        save_table_results(target, results, results_file)
        
        # –°—á–∏—Ç–∞–µ–º —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        total_count = len(results['vulnerabilities'])
        sql_count = sum(1 for severity, _ in results['vulnerabilities'] if severity == 'CRITICAL')
        exploit_count = len(results['exploits'])
        
        print(f"   ‚úÖ –£—è–∑–≤–∏–º–æ—Å—Ç–∏: {total_count} (SQL: {sql_count}), –≠–∫—Å–ø–ª–æ–π—Ç—ã: {exploit_count}")
        
        time.sleep(1)
    
    print(f"\nüíæ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_file}")

def show_clean_results():
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    """
    results_file = "scan_results.txt"
    if os.path.exists(results_file):
        print("\n" + "‚ïê" * 80)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø (–ë–ï–ó XSS –ò CROSS-SITE):")
        print("‚ïê" * 80)
        with open(results_file, 'r', encoding='utf-8') as f:
            print(f.read())
    else:
        print("üìÅ –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!")

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    print("üõ°Ô∏è  JoomScan Vulnerability Scanner")
    print("‚ïê" * 35)
    print("üìã –í—Å–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –∫—Ä–æ–º–µ XSS –∏ Cross-Site")
    print("üî¥ SQL Injection - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è")
    print("‚ùå XSS –∏ Cross-Site Scripting - —Å–∫—Ä—ã—Ç—ã")
    
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python joomscan_bot.py sites.txt")
        sys.exit(1)
    
    input_file = sys.argv[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º JoomScan
    try:
        subprocess.run(["joomscan", "--version"], capture_output=True, check=True)
        print("‚úÖ JoomScan –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    except:
        print("‚ùå JoomScan –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install joomscan")
        sys.exit(1)
    
    process_targets(input_file)
    show_clean_results()
    print("\nüéâ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
